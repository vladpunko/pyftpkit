[build-system]
requires = ["scikit-build-core>=0.11", "pybind11>=3.0"]
build-backend = "scikit_build_core.build"

[project]
name = "pyftpkit"
version = "0.1.0"
description = "Asynchronous library for FTP-based file system operations"
readme = "README.md"
authors = [
  {name = "Vladislav Punko", email = "iam.vlad.punko@gmail.com"},
]
license = "MIT"
requires-python = ">=3.10"
dependencies = [
  "pycurl>=7.45.2,<8",
  "pydantic>=2.7,<3",
  "pydantic_settings>=2.10,<3",
]
classifiers = [
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development",
  "Topic :: Utilities",
  "Typing :: Typed",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
]

[project.urls]
"Issue tracker" = "https://github.com/vladpunko/pyftpkit/issues"
"Source code" = "https://github.com/vladpunko/pyftpkit"

[project.scripts]
pyftpkit = "pyftpkit.__main__:main"

[project.optional-dependencies]
dev = [
  "bandit>=1.8,<2.0",
  "black>=25.1,<26.0",
  "build>= 1.3,<2.0",
  "flake8>=7.1,<8.0",
  "isort>=6.0,<7.0",
  "mypy>=1.14,<2.0",
  "pre-commit>=4.1,<5.0",
  "ruff>=0.9,<1.0",
  "twine>=6.1,<7.0",
]
tests = [
  "coverage>=7.6,<8.0",
  "pyfakefs>=5.7,<6.0",
  "pyftpdlib>=2.0,<3",
  "pytest-asyncio>=1.1,<2",
  "pytest-cov>=6.0,<7.0",
  "pytest-html>=4.1,<5.0",
  "pytest-mock>=3.14,<4.0",
  "pytest>=8.3,<9.0",
  "tox>=4.24,<5.0",
]

[tool.scikit-build]
minimum-version = "build-system.requires"
wheel.packages = [
  "src/pyftpkit",
]
wheel.py-api = "py3"

[tool.pytest.ini_options]
addopts = [
  "-vv",
  "-x",  # exit instantly on first error or failed test
  # ---
  "--cov-report=html",
  "--cov-report=term",
  "--cov",
  "--doctest-modules",
  "--durations=10",
  "--failed-first",
  "--import-mode=importlib",
  "--new-first",
  # ---
  "--html=./.pytest_report/index.html",
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
omit = [
  "src/pyftpkit/__about__.py",
  "src/pyftpkit/__main__.py",
]
parallel = true
source = ["src/pyftpkit"]

[tool.coverage.report]
exclude_lines = [
  "@abc.abstractmethod",

  # We have to re-enable the standard pragma.
  "pragma: no cover",

  # Do not complain about missing debug-only code.
  "def __repr__",
  "if self.debug:",

  # No need to complain if tests do not hit defensive assertion code.
  "pass",
  "raise AssertionError",
  "raise NotImplementedError",
  "return NotImplemented",

  # Do not complain if non-runnable code is not run.
  "if __name__ == .__main__.:",
  "if 0:",
  "if False:",
]
show_missing = true

[tool.black]
target-version = ["py310", "py311", "py312"]

[tool.bandit]
exclude_dirs = [
  "docs/",
  "examples/",
  "tests/",
  "setup.py",
]
skips = ["B402"]

[tool.isort]
profile = "black"
known_local_folder = ["pyftpkit"]

[tool.mypy]
disallow_untyped_defs = true
exclude = [
  ".pyi$",
  "^docs/",
  "^examples/",
  "^tests/",
]
ignore_missing_imports = true
plugins = "pydantic.mypy"
strict_optional = true

[tool.ruff]
exclude = [
  "*.pyi",
  "docs/",
  "tests/",
]
line-length = 88
select = ["A", "B", "C", "E", "F", "N", "W"]
